// <auto-generated />
using System;
using Catalog.DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Catalog.DataAccessLayer.Migrations
{
    [DbContext(typeof(CatalogContext))]
    [Migration("20241021004049_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Catalog.DataAccessLayer.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("CategoryId")
                        .HasName("PRIMARY");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("Catalog.DataAccessLayer.Entities.Ingredient", b =>
                {
                    b.Property<int>("IngredientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("IngredientID");

                    b.ToTable("ingridient", (string)null);
                });

            modelBuilder.Entity("Catalog.DataAccessLayer.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<bool?>("Availability")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(1,1)");

                    b.HasKey("ProductId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CategoryId" }, "CategoryID");

                    b.ToTable("products", null, t =>
                        {
                            t.HasCheckConstraint("ValidRating", "Rating >= 0 AND Rating <= 5");
                        });
                });

            modelBuilder.Entity("Catalog.DataAccessLayer.Entities.Producttag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("TagId");

                    b.ToTable("Producttags");
                });

            modelBuilder.Entity("Catalog.DataAccessLayer.Entities.Promotion", b =>
                {
                    b.Property<int>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PromotionID");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasPrecision(5)
                        .HasColumnType("decimal(5)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("PromotionId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProductId" }, "ProductID");

                    b.ToTable("promotions", null, t =>
                        {
                            t.HasCheckConstraint("ValidPercentage", "DiscountPercentage >= 0 AND DiscountPercentage <= 50");
                        });
                });

            modelBuilder.Entity("Catalog.DataAccessLayer.Entities.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReviewID");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<byte>("Rating")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime?>("ReviewDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("ReviewId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProductId" }, "ProductID")
                        .HasDatabaseName("ProductID1");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("IngredientProduct", b =>
                {
                    b.Property<int>("ProductIngredientsIngredientID")
                        .HasColumnType("int");

                    b.Property<int>("ProductsProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductIngredientsIngredientID", "ProductsProductId");

                    b.HasIndex("ProductsProductId");

                    b.ToTable("ProductAndIngridient", (string)null);
                });

            modelBuilder.Entity("ProductProducttag", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProducttagsTagId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "ProducttagsTagId");

                    b.HasIndex("ProducttagsTagId");

                    b.ToTable("ProductTagWithProduct", (string)null);
                });

            modelBuilder.Entity("ProductPromotion", b =>
                {
                    b.Property<int>("ProductsProductId")
                        .HasColumnType("int");

                    b.Property<int>("PromotionsPromotionId")
                        .HasColumnType("int");

                    b.HasKey("ProductsProductId", "PromotionsPromotionId");

                    b.HasIndex("PromotionsPromotionId");

                    b.ToTable("PromotionAndProducts", (string)null);
                });

            modelBuilder.Entity("Catalog.DataAccessLayer.Entities.Product", b =>
                {
                    b.HasOne("Catalog.DataAccessLayer.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("products_ibfk_1");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Catalog.DataAccessLayer.Entities.Review", b =>
                {
                    b.HasOne("Catalog.DataAccessLayer.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("reviews_ibfk_1");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("IngredientProduct", b =>
                {
                    b.HasOne("Catalog.DataAccessLayer.Entities.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("ProductIngredientsIngredientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Catalog.DataAccessLayer.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductProducttag", b =>
                {
                    b.HasOne("Catalog.DataAccessLayer.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Catalog.DataAccessLayer.Entities.Producttag", null)
                        .WithMany()
                        .HasForeignKey("ProducttagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductPromotion", b =>
                {
                    b.HasOne("Catalog.DataAccessLayer.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Catalog.DataAccessLayer.Entities.Promotion", null)
                        .WithMany()
                        .HasForeignKey("PromotionsPromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Catalog.DataAccessLayer.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Catalog.DataAccessLayer.Entities.Product", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
